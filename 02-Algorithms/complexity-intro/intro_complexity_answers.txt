1: Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n).  An example would be:

	O(n) would be jet and O(2^n) would be a blimp

2: In plain English, what is the best case scenario for binary search?
	
	Best case scenario for binary search would be when the mid point is the element being searched.

3: In plain English, what is the worst-case scenario for binary search?
	
	The worst case scenario would be if the item being searched doesn't exist.

4: In plain English, what is the bounded-case scenario for binary search?

	The bounded case scenario would be after the first iteration if the number is in the half being iterated through.

5: Create a graph using the data below. Here's a CSV with the values you'll need.

	https://docs.google.com/spreadsheets/d/16pImmy9erveSww44gfbLkYVtLQ01M9GHs4YdCoBRGs4/edit#gid=0

6: What is the limit of the function above as n approaches infinity?

	positive inifinity

7: What is the Big-O of an algorithm that has the data points above?

	O(n^2) increases in n cause f(n) to double in size.

8: Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.

	def worst_case(array)
		array.each do |index, value|
			print "n: index, y: #{value ** 2}"
		end
	end

9: Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.

	https://docs.google.com/spreadsheets/d/16pImmy9erveSww44gfbLkYVtLQ01M9GHs4YdCoBRGs4/edit#gid=0

10: What is the Big-O of binary search?
	
	O(n)

11: What is the Big-Ω of binary search?
	
	Omega(1)

12: What is the Big-Ө of binary search?

	O(log n)